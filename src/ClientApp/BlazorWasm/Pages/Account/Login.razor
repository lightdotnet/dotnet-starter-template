@page "/account/login"
@attribute [AllowAnonymous]
@layout MainLayout

@inject IIdentityManager IdentityManager

<PageTitle>Log in</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex align-center" Style="height: 100vh;">
    <div class="d-flex flex-column mud-width-full">
        <div style="max-width:400px">

            <MudPaper Elevation="0" Class="pa-8" Width="100%" Style="position: relative;">

                <EditForm Model="@Input" OnSubmit="OnLoginAsync" autocomplete="off">

                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger" role="alert">@error</div>
                    }

                    <DataAnnotationsValidator />

                    <div class="mb-5">
                        <Input PlaceHolder="Username" @bind-Value="@Input.Username" Required />
                    </div>

                    <div class="mb-5">
                        <Input_Password PlaceHolder="Password" @bind-Value="@Input.Password" Required />
                    </div>

                    <Button Label="Login" Color="AppColor.Primary" FullWidth Submit />

                    <Overlay IsProcessing="processing" />

                </EditForm>
            </MudPaper>
            <div class="text-center text-secondary">
                @WebSettings.Version
            </div>
        </div>
    </div>
</MudContainer>

@code {
    [SupplyParameterFromForm]
    private LoginModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool processing = false;

    private string? error;

    protected override void OnInitialized()
    {
#if DEBUG
        // auto login in by dev account
        if (string.IsNullOrEmpty(Input.Username))
        {
            Input.Username = "super";
            Input.Password = "123";
        }
#endif
    }

    public async Task OnLoginAsync()
    {
        processing = true;

        try
        {
            var login = await IdentityManager.LoginAsync(Input.Username, Input.Password);

            if (login.Succeeded)
            {
                NavigationManager.RedirectWhenLoginSuccess(ReturnUrl);
            }
            else
            {
                error = "Invalid username or password";
                //error = login.Message;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        
        processing = false;
    }

    private sealed class LoginModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
