<MudDialog Style="position: relative">
    <DialogContent>

        <EditForm Model="@User" OnValidSubmit="OnSubmitAsync" FormName="userForm">

            <DataAnnotationsValidator />

            <div class="row mb-3">
                <div class="col-sm-6">
                    <MudTextField @bind-Value=User.FirstName Label="FirstName" Class="mb-3" />

                    <MudTextField @bind-Value=User.LastName Label="LastName" Class="mb-3" />

                    <MudTextField @bind-Value=User.Email Label="Email" Class="mb-3" />

                    <MudTextField @bind-Value=User.PhoneNumber Label="PhoneNumber" Class="mb-3" />

                    <MudSelect @bind-Value="User.Status">
                        @foreach (var value in statuses)
                        {
                            <MudSelectItem Value="value">@value.ToString()</MudSelectItem>
                        }
                    </MudSelect>

                    <MudTextField @bind-Value=User.AuthProvider Label="AuthProvider" Class="mb-3" />
                </div>
                <div class="col-sm-6">
                    @foreach (var userRole in userRoles)
                    {
                        <MudCheckBox Label="@userRole.RoleName" 
                        Dense="true" Size="Size.Small" Color="Color.Primary"
                        @bind-Value="userRole.IsOwned">
                        </MudCheckBox>
                    }
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <IconActionButtons IconAction="IconActionButtons.Action.Save" Submit />
            </div>

        </EditForm>

    </DialogContent>

    <DialogActions>
        <MudOverlay Visible="processing" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </MudOverlay>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance dialog { get; set; } = default!;

    [Parameter]
    public UserDto User { get; set; } = default!;

    private bool processing = false;

    private IEnumerable<IdentityStatus> statuses = Enum.GetValues<IdentityStatus>();

    private List<UserRoleDto> userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        ToggleSearchStatus();

        var getDetails = await UserService.GetByIdAsync(User.Id);

        if (getDetails.Succeeded)
        {
            User = getDetails.Data;

            var getRoles = await RoleService.GetAsync();

            userRoles = getRoles.Data
                .Select(s => new UserRoleDto
                {
                    RoleName = s.Name,
                    IsOwned = User.Roles.Any(role => role == s.Name)
                })
                .ToList();

            ToggleSearchStatus();
        }
    }

    private void ToggleSearchStatus()
    {
        processing = !processing;
    }

    private async Task OnSubmitAsync()
    {
        // get roles selected for update
        var rolesSelected = userRoles.Where(x => x.IsOwned == true).Select(s => s.RoleName).ToList();

        User.Roles = rolesSelected;

        await CallGuarded.ExecuteAsync(
            () => UserService.UpdateAsync(User),
            $"User {User.UserName} updated",
            dialog);
    }

    private sealed class UserRoleDto
    {
        public string RoleName { get; set; } = null!;

        public bool IsOwned { get; set; }
    }
}
