<MudAutocomplete T="UserDto"
    Variant="@Mud.Variant"
    Margin="@Mud.Margin"
    Placeholder="search by user..."
    MaxItems="20"
    Clearable="true"
    ResetValueOnEmptyText="true"
    ValueChanged="OnSelectedUserChanged"
    SearchFunc="Search"
    ToStringFunc="@(e=> e==null?null : $"{e.FirstName} {e.LastName} ({e.UserName})")" />

@code {
    [Parameter]
    public IEnumerable<UserDto> List { get; set; } = new List<UserDto>();

    [Parameter]
    public EventCallback<UserDto> SelectedUserChanged { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Text;

    private Task<IEnumerable<UserDto>> Search(string? value, CancellationToken token)
    {
        var result = List;

        if (!string.IsNullOrEmpty(value))
        {
            result = List
                .Where(x =>
                    x.UserName.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                    || x.FirstName.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                    || x.LastName.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                    || x.Email.Contains(value, StringComparison.InvariantCultureIgnoreCase)
                    || x.PhoneNumber.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .OrderBy(o => o.UserName);
        }

        return Task.FromResult(result);
    }

    private async Task OnSelectedUserChanged(UserDto user)
    {
        await SelectedUserChanged.InvokeAsync(user);
    }
}
